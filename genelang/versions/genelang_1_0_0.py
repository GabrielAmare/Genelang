from genelang import *

engine = Engine(Lexer(Pattern(name='KW_PATTERN', mode='str', expr='@', flag=0, ignore=False), Pattern(name='KW_MATCH', mode='str', expr='$', flag=0, ignore=False), Pattern(name='KW_RE', mode='kw', expr='re', flag=0, ignore=False), Pattern(name='KW_KW', mode='kw', expr='kw', flag=0, ignore=False), Pattern(name='KW_STR', mode='kw', expr='str', flag=0, ignore=False), Pattern(name='KW_IGNORE', mode='kw', expr='ignore', flag=0, ignore=False), Pattern(name='KW_WHILE', mode='kw', expr='while', flag=0, ignore=False), Pattern(name='KW_DO', mode='kw', expr='do', flag=0, ignore=False), Pattern(name='KW_FORK', mode='kw', expr='fork', flag=0, ignore=False), Pattern(name='KW_ANY', mode='kw', expr='any', flag=0, ignore=False), Pattern(name='KW_OPTIONAL', mode='kw', expr='optional', flag=0, ignore=False), Pattern(name='KW_BUILD', mode='kw', expr='build', flag=0, ignore=False), Pattern(name='VAR', mode='re', expr='[a-zA-Z_][a-zA-Z0-9_]*', flag=0, ignore=False), Pattern(name='INT', mode='re', expr='[0-9]+', flag=0, ignore=False), Pattern(name='STR', mode='re', expr="'.*?'", flag=16, ignore=False), Pattern(name='STR', mode='re', expr='".*?"', flag=16, ignore=False), Pattern(name='EQUAL', mode='str', expr='=', flag=0, ignore=False), Pattern(name='LV', mode='str', expr='<', flag=0, ignore=False), Pattern(name='LP', mode='str', expr='(', flag=0, ignore=False), Pattern(name='RP', mode='str', expr=')', flag=0, ignore=False), Pattern(name='LS', mode='str', expr='{', flag=0, ignore=False), Pattern(name='RS', mode='str', expr='}', flag=0, ignore=False), Pattern(name='STAR', mode='str', expr='*', flag=0, ignore=False), Pattern(name='PLUS', mode='str', expr='+', flag=0, ignore=False), Pattern(name='QUESTION_MARK', mode='str', expr='?', flag=0, ignore=False), Pattern(name='DOT', mode='str', expr='.', flag=0, ignore=False), Pattern(name='COLON', mode='str', expr=':', flag=0, ignore=False), Pattern(name='SEMICOLON', mode='str', expr=';', flag=0, ignore=False), Pattern(name='VBAR', mode='str', expr='|', flag=0, ignore=False), Pattern(name='WHITESPACE', mode='re', expr='[ \t\n]', flag=16, ignore=True), Pattern(name='ERROR', mode='re', expr='.+', flag=16, ignore=False)), Parser(Build(Identifier('Pattern'), Branch(Match(Identifier('KW_PATTERN')), As('name', Match(Identifier('VAR'))), As('mode', Match(Identifier('KW_RE'), Identifier('KW_STR'), Identifier('KW_KW'))), As('expr', Match(Identifier('STR'))), Optional(As('flag', Match(Identifier('INT')))), Optional(As('ignore_', Match(Identifier('KW_IGNORE')))))), NamedProcess(Identifier('_SCOPE'), Branch(Match(Identifier('LS')), While(In('items', Match(Identifier('', Group('I')))), Optional(Match(Identifier('SEMICOLON')))), Match(Identifier('RS')))), Build(Identifier('Group'), Branch(Match(Identifier('DOT')), As('name', Match(Identifier('VAR'))))), Build(Identifier('Identifier'), Branch(Fork(Branch(As('name', Match(Identifier('VAR')))), Branch(In('groups', Match(Identifier('Group'))))), While(In('groups', Match(Identifier('Group')))))), Build(Identifier('In', Group('I')), Branch(As('name', Match(Identifier('VAR'))), Match(Identifier('LV')), As('process', Match(Identifier('', Group('I')))))), Build(Identifier('As', Group('I')), Branch(As('name', Match(Identifier('VAR'))), Match(Identifier('EQUAL')), As('process', Match(Identifier('', Group('I')))))), Build(Identifier('Match', Group('I')), Branch(Match(Identifier('KW_MATCH')), DoWhile(Branch(In('identifiers', Match(Identifier('Identifier')))), Branch(Match(Identifier('VBAR')))))), Build(Identifier('DoWhile', Group('I')), Branch(Match(Identifier('KW_DO')), As('left', Match(Identifier('Branch'))), Match(Identifier('KW_WHILE')), As('right', Match(Identifier('Branch'))))), Build(Identifier('WhileDo', Group('I')), Branch(Match(Identifier('KW_WHILE')), As('left', Match(Identifier('Branch'))), Match(Identifier('KW_DO')), As('right', Match(Identifier('Branch'))))), Build(Identifier('While', Group('I')), Branch(Match(Identifier('KW_WHILE')), Match(Identifier('_SCOPE')))), Build(Identifier('Optional', Group('I')), Branch(Match(Identifier('KW_OPTIONAL')), Match(Identifier('_SCOPE')))), Build(Identifier('Any', Group('I')), Branch(Match(Identifier('KW_ANY')), Match(Identifier('_SCOPE')))), Build(Identifier('Fork', Group('I')), Branch(Match(Identifier('KW_FORK')), WhilePlus(In('items', Match(Identifier('Branch')))))), Build(Identifier('Branch', Group('I')), Branch(Match(Identifier('_SCOPE')))), Build(Identifier('While', Group('I')), Branch(Match(Identifier('STAR')), In('items', Match(Identifier('', Group('I')))))), Build(Identifier('Optional', Group('I')), Branch(Match(Identifier('QUESTION_MARK')), In('items', Match(Identifier('', Group('I')))))), Build(Identifier('WhilePlus', Group('I')), Branch(Match(Identifier('PLUS')), In('items', Match(Identifier('', Group('I')))))), Build(Identifier('Build', Group('P')), Branch(Match(Identifier('KW_BUILD')), Match(Identifier('LP')), As('identifier', Match(Identifier('Identifier'))), Match(Identifier('RP')), As('process', Match(Identifier('', Group('I')))))), Build(Identifier('NamedProcess', Group('P')), Branch(As('identifier', Match(Identifier('Identifier'))), As('process', Match(Identifier('Branch'))))), Build(Identifier('Parser'), Branch(WhilePlus(In('builds', Match(Identifier('', Group('P'))))))), Build(Identifier('Lexer'), Branch(WhilePlus(In('patterns', Match(Identifier('Pattern')))))), Build(Identifier('Engine'), Branch(As('lexer', Match(Identifier('Lexer'))), As('parser', Match(Identifier('Parser')))))))
