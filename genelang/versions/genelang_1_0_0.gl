@ KW_PATTERN str '@'
@ KW_MATCH str '$'
@ KW_RE kw 're'
@ KW_KW kw 'kw'
@ KW_STR kw 'str'
@ KW_IGNORE kw 'ignore'
@ KW_WHILE kw 'while'
@ KW_DO kw 'do'
@ KW_FORK kw 'fork'
@ KW_ANY kw 'any'
@ KW_OPTIONAL kw 'optional'
@ KW_BUILD kw 'build'

@ VAR re '[a-zA-Z_][a-zA-Z0-9_]*'
@ INT re '[0-9]+'
@ STR re "'.*?'" 16
@ STR re '".*?"' 16
@ EQUAL str '='
@ LV str '<'
@ LP str '('
@ RP str ')'
@ LS str '{'
@ RS str '}'
@ STAR str '*'
@ PLUS str '+'
@ QUESTION_MARK str '?'
@ DOT str '.'
@ COLON str ':'
@ SEMICOLON str ';'
@ VBAR str '|'
@ WHITESPACE re '[ \t\n]' 16 ignore
@ ERROR re '.+' 16

build(Pattern){
    $KW_PATTERN
    name = $VAR
    mode = $KW_RE|KW_STR|KW_KW
    expr = $STR
    ?flag = $INT
    ?ignore_ = $KW_IGNORE
}

_SCOPE{ $LS; while{ items < $.I; ?$SEMICOLON; } $RS; }

build(Group){ $DOT; name = $VAR; }
build(Identifier){ fork{ name = $VAR }{ groups < $Group } *groups < $Group; }

build(In.I){ name = $VAR; $LV; process = $.I; }
build(As.I){ name = $VAR; $EQUAL; process = $.I; }

build(Match.I){ $KW_MATCH; do{ identifiers < $Identifier; }while{ $VBAR; } }
build(DoWhile.I){ $KW_DO; left = $Branch; $KW_WHILE; right = $Branch; }
build(WhileDo.I){ $KW_WHILE; left = $Branch; $KW_DO; right = $Branch; }
build(While.I){ $KW_WHILE; $_SCOPE; }
build(Optional.I){ $KW_OPTIONAL; $_SCOPE; }
build(Any.I){ $KW_ANY; $_SCOPE; }
build(Fork.I){ $KW_FORK; +items < $Branch; }
build(Branch.I){ $_SCOPE; }
build(While.I){ $STAR; items < $.I; }
build(Optional.I){ $QUESTION_MARK; items < $.I; }
build(WhilePlus.I){ $PLUS; items < $.I; }


build(Build.P){ $KW_BUILD; $LP; identifier = $Identifier; $RP; process = $.I; }
build(NamedProcess.P){ identifier = $Identifier; process = $Branch; }

build(Parser){ +builds < $.P; }
build(Lexer){ +patterns < $Pattern; }

build(Engine){ lexer = $Lexer; parser = $Parser; }